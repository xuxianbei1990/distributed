package practice;

/**
 * @author: xuxianbei
 * Date: 2022/10/26
 * Time: 10:37
 * Version:V1.0
 */
public class KniTreeMap {

    /**
     * 对比ArrayList提高了性能，在查找方面logn
     * 怎么构建红黑树？
     * 1.是否有root节点，没有，那么本节点就是root。
     * 2.存在root，比较当前节点和root节点，如果比它大就放到右孩子，比它小放到左孩子。依次对比直到加入
     * 3.平衡红黑树，把当前节点作为红色节点加入
     * 3.1:该节点不是空，该节点不是根节点，该节点的父节点是红色，否则 根置为红色
     *
     *          * 一共四种情况：
     *          * 父节点左添加时候：
     *          * 获取右叔叔节点
     *          * 1.父节点和叔叔节点都是红色：设置父节点，叔叔节点为黑色，设置祖父节点红色，祖父节点赋值给当前节点
     *          * 2.父节点红色，叔叔节点黑色:
     *          *    如果是右加孩子，把当前节点改为父节点, 左旋当前节点; 父节点置为黑色，祖父节点红色，右旋祖父节点
     *          * 父节点右添加时候：
     *          * 获取左叔叔节点
     *          * 1.父节点和叔叔节点都是红色：设置父节点，叔叔节点黑色，设置祖父节点为红色，祖父节点赋值给当前节点
     *          * 2.父节点红色，叔叔节点黑色：
     *          *    左孩子添加，把当前节点改为父节点, 右旋当前节点；父亲节置为黑色，祖父节点红色，左旋祖父节点
     *          *
     *          *
     *
     *
     */

}
